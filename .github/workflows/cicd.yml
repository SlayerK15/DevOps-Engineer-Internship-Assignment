name: CI/CD (Build → Push → Deploy)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          ecr: false
          username: slayerop15
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push frontend
        run: |
          docker build -t slayerop15/frontend:latest ./frontend
          docker push slayerop15/frontend:latest

      - name: Build & push backend
        run: |
          docker build -t slayerop15/backend:latest ./backend
          docker push slayerop15/backend:latest

  deploy_to_ec2:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Validate required secrets
        run: |
          fail=0
          [ -n "${{ secrets.EC2_TARGET }}" ] || { echo "Missing secret: EC2_TARGET" >&2; fail=1; }
          [ -n "${{ secrets.EC2_SSH_KEY_PEM }}" ] || { echo "Missing secret: EC2_SSH_KEY_PEM" >&2; fail=1; }
          [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ] || { echo "Missing secret: DOCKERHUB_TOKEN" >&2; fail=1; }
          [ $fail -eq 0 ] || exit 1

      - name: Add SSH key
        run: |
          install -m 600 -D /dev/stdin ~/.ssh/id_rsa <<'EOF'
          ${{ secrets.EC2_SSH_KEY_PEM }}
          EOF
          printf "Host *\n  StrictHostKeyChecking no\n" >> ~/.ssh/config

      - name: Wait for Docker Hub tag propagation
        run: sleep 45

      - name: Create docker-compose.yml locally (images only)
        run: |
          cat > docker-compose.yml <<'YAML'
          services:
            mongo:
              image: mongo:6
              restart: unless-stopped
              volumes:
                - mongo_data:/data/db

            backend:
              image: slayerop15/backend:latest
              restart: unless-stopped
              environment:
                MONGO_URL: mongodb://mongo:27017/dd_db
                NODE_ENV: production
              depends_on:
                - mongo

            frontend:
              image: slayerop15/frontend:latest
              restart: unless-stopped
              depends_on:
                - backend
              ports:
                - "80:80"

          volumes:
            mongo_data:
          YAML

      - name: Ensure target dir & copy compose to EC2
        run: |
          ssh -i ~/.ssh/id_rsa "${{ secrets.EC2_TARGET }}" "sudo mkdir -p /srv/app && sudo chown \$USER:\$USER /srv/app"
          scp -i ~/.ssh/id_rsa docker-compose.yml "${{ secrets.EC2_TARGET }}":/srv/app/docker-compose.yml

      - name: Deploy on EC2 (pull → down → up -d, keep volumes)
        run: |
          ssh -i ~/.ssh/id_rsa "${{ secrets.EC2_TARGET }}" '
            set -euo pipefail

            # Install Docker & Compose if missing
            if ! command -v docker >/dev/null 2>&1; then
              sudo apt-get update -y
              sudo apt-get install -y docker.io docker-compose-plugin
              sudo systemctl enable --now docker
            fi

            cd /srv/app
            echo "Pulling latest images…"
            sudo docker compose pull

            echo "Stopping containers (keeping volumes)…"
            sudo docker compose down --remove-orphans   # no -v: keeps mongo_data

            echo "Starting containers with fresh images…"
            sudo docker compose up -d

            echo "Pruning unused images (optional)…"
            sudo docker image prune -f || true

            echo "Current status:"
            sudo docker ps
          '

name: CI/CD (Build → Push → Compose down/up)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: slayerop15
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push frontend
        run: |
          docker build -t slayerop15/frontend:latest ./frontend
          docker push slayerop15/frontend:latest

      - name: Build & push backend
        run: |
          docker build -t slayerop15/backend:latest ./backend
          docker push slayerop15/backend:latest

  deploy_to_ec2:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Add SSH key
        run: |
          install -m 600 -D /dev/stdin ~/.ssh/id_rsa <<'EOF'
          ${{ secrets.EC2_SSH_KEY_PEM }}
          EOF
          printf "Host *\n  StrictHostKeyChecking no\n" >> ~/.ssh/config

      - name: Wait for Docker Hub tag propagation (45s)
        run: sleep 45

      - name: Deploy on EC2 (keep data, refresh containers)
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} bash -s <<'REMOTE'
          set -euo pipefail

          APP_DIR="/srv/app"

          # Ensure Docker & Compose exist
          if ! command -v docker >/dev/null 2>&1; then
            echo "Docker not found; installing..."
            sudo apt-get update -y
            sudo apt-get install -y docker.io docker-compose-plugin
            sudo systemctl enable --now docker
          fi

          # Ensure app dir
          sudo mkdir -p "$APP_DIR"
          sudo chown -R "$USER":"$USER" "$APP_DIR"
          cd "$APP_DIR"

          # Write the compose file you specified (images only)
          cat > docker-compose.yml <<'YAML'
          services:
            mongo:
              image: mongo:6
              restart: unless-stopped
              volumes:
                - mongo_data:/data/db

            backend:
              image: slayerop15/backend:latest
              restart: unless-stopped
              environment:
                MONGO_URL: mongodb://mongo:27017/dd_db
                NODE_ENV: production
              depends_on:
                - mongo

            frontend:
              image: slayerop15/frontend:latest
              restart: unless-stopped
              depends_on:
                - backend
              ports:
                - "80:80"

          volumes:
            mongo_data:
          YAML

          echo "Pulling latest images…"
          sudo docker compose pull

          echo "Stopping containers (keeping volumes)…"
          # IMPORTANT: no -v here, so mongo_data persists.
          sudo docker compose down --remove-orphans

          echo "Starting containers with fresh images…"
          sudo docker compose up -d

          echo "Pruning unused images (optional)…"
          sudo docker image prune -f || true

          echo "Current status:"
          sudo docker ps
          
          REMOTE
